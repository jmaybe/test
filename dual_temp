import os
import glob
import time
from ISStreamer.Streamer import Streamer

streamer = Streamer(bucket_name="Dual Temperature Stream", bucket_key="piot_temp_stream031815", access_key="PUT_YOUR_ACCESS_KEY_HERE")

os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')

#base_dir = '/sys/bus/w1/devices/'
#device_folder = glob.glob(base_dir + '28*')[0]
#device_file = device_folder + '/w1_slave'



base_dir1 = '/sys/bus/w1/devices/'
device_folder1 = glob.glob(base_dir1 + '28-02157132c1ff')[0]
device_file1 = device_folder1 + '/w1_slave'

def read_temp_raw1():
    f = open(device_file1, 'r')
    lines = f.readlines()
    f.close()
    return lines


def read_temp1():
    lines = read_temp_raw1()
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        lines = read_temp_raw()
    equals_pos1 = lines[1].find('t=')
    if equals_pos1 != -1:
        temp_string1 = lines[1][equals_pos1+2:]
        temp_c1 = float(temp_string1) / 1000.0
        return temp_c1

#def read_temp_raw1():
#        catdata = subprocess.Popen(['cat',device_file1], stdout = subprocess.PIPE, stderr=subprocess.PIPE)
#       out,err = catdata.communicate()
#        out_decode = out.decode('utf-8')
#        lines = out_decode.split('\n')
#        return lines

#def read_temp1():
#        lines = read_temp_raw1()
#        while lines[0].strip()[-3:] != 'YES':
#                time.sleep(10.0)
#                lines = read_temp_raw()
#        equals_pos = lines[1].find('t=')
#        if equals_pos != -1:
#                temp_string = lines[1][equals_pos+2:]
#                temp_c1 = float(temp_string) / 1000.0
#                temp_f1 = temp_c * 9.0 / 5.0 + 32.0
#                return temp_c1, temp_f1

base_dir2 = '/sys/bus/w1/devices/'
device_folder2 = glob.glob(base_dir2 + '28-0215715a80ff')[0]
device_file2 = device_folder2 + '/w1_slave'

def read_temp_raw2():
    f = open(device_file2, 'r')
    lines = f.readlines()
    f.close()
    return lines


def read_temp2():
    lines = read_temp_raw2()
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        lines = read_temp_raw()
    equals_pos2 = lines[1].find('t=')
    if equals_poss != -1:
        temp_string2 = lines[1][equals_pos2+2:]
        temp_c2 = float(temp_string2) / 1000.0
        return temp_c2

#def read_temp_raw():
#        catdata = subprocess.Popen(['cat',device_file2], stdout = subprocess.PIPE, stderr=subprocess.PIPE)
#        out,err = catdata.communicate()
#        out_decode = out.decode('utf-8')
#        lines = out_decode.split('\n')
#        return lines

#def read_temp():
#        lines = read_temp_raw()
#        while lines[0].strip()[-3:] != 'YES':
#                time.sleep(10.0)
#                lines = read_temp_raw()
#        equals_pos = lines[1].find('t=')
#        if equals_pos != -1:
#                temp_string = lines[1][equals_pos+2:]
#                temp_c = float(temp_string) / 1000.0
#                temp_f = temp_c * 9.0 / 5.0 + 32.0
#                return temp_c, temp_f



while True:
    temp_c1 = read_temp1()
    temp_f1 = temp_c1 * 9.0 / 5.0 + 32.0
    streamer.log("temperature (C)", temp_c1)
    streamer.log("temperature (F)", temp_f1)
    streamer.flush()
    time.sleep(30.0)
    
    temp_c2 = read_temp2()
    temp_f2 = read_temp2()
    streamer.log("temperature2 (C)", temp_c2)
    streamer.log("temperature2 (F)", temp_f2)
    streamer.flush()
    time.sleep(30.0)
